generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Usuario {
  id             String          @id @default(uuid())
  usuario        String          @unique
  password       String
  rol            Rol
  padre          Padre?
  alumno         Alumno?
  docente        Docente?
  administrativo Administrativo?
}

enum Rol {
  PADRE
  ALUMNO
  DOCENTE
  ADMINISTRATIVO
}

model Padre {
  id                String   @id @unique @default(uuid())
  usuario           Usuario  @relation(fields: [id], references: [id])
  nombre            String
  apellido          String
  dni               String   @unique
  direccion         String
  numeroTelefono    String
  correoElectronico String   @unique
  hijos             Alumno[] @relation("PadreHijos")
}

model Alumno {
  id                String  @id @unique @default(uuid())
  usuario           Usuario @relation(fields: [id], references: [id])
  nombre            String
  apellido          String
  dni               String  @unique
  numeroMatricula   String  @unique
  direccion         String
  telefono          String
  correoElectronico String  @unique
  padre             Padre?  @relation("PadreHijos", fields: [padreId], references: [id])
  padreId           String?
  curso             Curso   @relation(name: "AlumnoCurso", fields: [cursoId], references: [id])
  cursoId           String
  amonestaciones    Amonestacion[] @relation(name: "AmonestacionAlumno")
  asistencia        Asistencia[]   @relation(name: "AsistenciaAlumno")
  notas             Nota[]         @relation(name: "NotaAlumno")
  boletin           Boletin[]       @relation(name: "BoletinAlumno")
}

model Docente {
  id                String  @id @unique @default(uuid())
  usuario           Usuario @relation(fields: [id], references: [id])
  nombre            String
  apellido          String
  dni               String  @unique
  direccion         String
  matricula         String  @unique
  numeroTelefono    String
  correoElectronico String  @unique
  cursos            Curso[] @relation("DocenteCurso")
  materia           Materia @relation(fields: [materiaId], references: [id], name: "DocenteMateria")
  materiaId         String  @unique
}

model Administrativo {
  id                String  @id @unique @default(uuid())
  usuario           Usuario @relation(fields: [id], references: [id])
  nombre            String
  apellido          String
  dni               String  @unique
  direccion         String
  numeroTelefono    String
  correoElectronico String  @unique
}

model Materia {
  id      String   @id @default(uuid())
  nombre  String
  docente Docente? @relation(name: "DocenteMateria")
  cursos  Curso[]  @relation("MateriaCurso")
  notas   Nota[]  @relation("NotaMateria")
}

model Curso {
  id       String    @id @default(uuid())
  nombre   String
  materias Materia[] @relation("MateriaCurso")
  docentes Docente[] @relation("DocenteCurso")
  alumnos  Alumno[]  @relation(name: "AlumnoCurso")
}

model Amonestacion {
  id          String   @id @default(uuid())
  tipo        Tipo
  fecha       DateTime
  descripcion String
  firma       Boolean  @default(false)
  alumno      Alumno   @relation(fields: [alumnoId], references: [id], name: "AmonestacionAlumno")
  alumnoId    String
}

enum Tipo {
  SANCION
  AMONESTACION
}

model Asistencia {
  id              String   @id @default(uuid())
  fecha           DateTime
  tipo_asistencia TipoAsistencia
  alumno          Alumno   @relation(fields: [alumnoId], references: [id], name: "AsistenciaAlumno")
  alumnoId        String
}

enum TipoAsistencia {
  AUSENTE
  PRESENTE
  TARDE
  JUSTIFICADA
}

model Nota {
  id              String   @id @default(uuid())
  calificacion    String
  alumno          Alumno   @relation(fields: [alumnoId], references: [id], name: "NotaAlumno")
  alumnoId        String
  materia         Materia  @relation(fields: [materiaId], references: [id], name: "NotaMateria")
  materiaId       String
  boletin         Boletin  @relation(fields: [boletinId], references: [id], name: "BoletinNota")
  boletinId       String
}

model Boletin {
  id              String   @id @default(uuid())
  periodo         Periodo
  anio            String
  alumno          Alumno   @relation(fields: [alumnoId], references: [id], name: "BoletinAlumno")
  alumnoId        String
  notas           Nota[]   @relation("BoletinNota")
}

enum Periodo {
  PRIMER_TRIMESTRE
  SEGUNDO_TRIMESTRE
  TERCER_TRIMESTRE
  ENERO
  MARZO
}